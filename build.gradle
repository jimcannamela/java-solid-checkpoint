plugins {
    id 'java'
    id 'jacoco'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

sourceSets {
    assessment {
        java.srcDir 'assessment/java'
        resources.srcDir 'assessment/resources'

        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    assessmentImplementation.extendsFrom testImplementation
    assessmentRuntimeOnly.extendsFrom testRuntimeOnly
}

// Ensure that any tests will use the new JUnit testing platform
tasks.withType(Test) { useJUnitPlatform() }

task assess(type: Test) {
    description = 'Run automated assessment.'
    group = 'verification'

    testClassesDirs = sourceSets.assessment.output.classesDirs
    classpath = sourceSets.assessment.runtimeClasspath

    testLogging {
        // set options for log level LIFECYCLE
        events "passed", "skipped", "failed"

        showExceptions true
        showCauses true
        exceptionFormat "full"
    }
}

jar {
    archiveBaseName = "$project.name"
    archiveVersion = '0.0.1-SNAPSHOT'
}

dependencies {
    // Use JUnit4 or JUnit Jupiter API for compilation.
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.2'

    // Use JUnit Jupiter Engine for testing both JUnit4 & JUnit5 tests.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'

    testImplementation 'org.hamcrest:hamcrest-all:1.3'

    assessmentImplementation 'com.google.guava:guava:29.0-jre'
    assessmentImplementation 'cglib:cglib-nodep:2.2'
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()

    testLogging {
        // set options for log level LIFECYCLE
        events "passed", "skipped", "failed"

        showExceptions true
        showCauses true
        exceptionFormat "full"
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.90
            }
        }
    }
}

check.dependsOn(assess)  // ensure assess is run as part of the check lifecycle task
assess.finalizedBy(test)

test.finalizedBy(jacocoTestReport)
jacocoTestReport.dependsOn(test)
jacocoTestReport.finalizedBy(jacocoTestCoverageVerification)

// The wrapper version should always be explicitly set here.
//
// This makes it very easy to see which version of Gradle is used.
// It also ensures that all the wrapper scripts are updated in
// addition to the jar and properties file.
//
// If you change ANY wrapper values you MUST run `./gradlew wrapper` and
// add everything updated to the same commit.

wrapper {
    gradleVersion = '7.3'
    distributionType = Wrapper.DistributionType.BIN
}
